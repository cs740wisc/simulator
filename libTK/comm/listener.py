import json
from twisted.internet import reactor
from twisted.internet.protocol import Protocol, Factory
from twisted.protocols.basic import LineReceiver

from libTK import *

class TKListenerProtocol(LineReceiver):
    """
        TKListenerProtocol class.
        This class is the low level Protocol object that works as a server.
        
        It mainly makes calls back to the Factory (TKListener) which allows functions
        to be overwritten by the implementer.
    """
    def __init__(self, addr, f, jsonize=True):
        self.myhost = addr.host
        self.myport = addr.port
        self.jsonize = jsonize
        self.myid = '%s:%d' % (self.myhost, self.myport)
        self.factory = f

    def logPrefix(self):
        return '[%s-%s @ %.2f]' % (self.factory.logprefix, self.myid, timeflt())

    def connectionMade(self):
        """@override:
            On connection made do this"""
        self.transport.setTcpKeepAlive(1)
        self.factory.connectionMade(self)

    def lineReceived(self, data):
        """@override:
            Main function called by the LineReceiver class when it has a full line of data."""
        # JSONize the data first
        if(self.jsonize):
            try:
                data = str2json(data.rstrip())
            except Exception as e:
                self.factory.dataReceivedFailure(self, data.rstrip(), e)
        self.factory.dataReceived(self, data)

    def connectionLost(self, reason):
        """@override:
            On a lost connection this is called"""
        self.factory.connectionLost(self, reason)

    def sendData(self, data):
        """Function that transmits data back to the client using the protocol @self."""
        # unJSONize the data first
        # If an exception happens thats ok, we want the caller to know
        if(self.jsonize):
            if(type(data) is not str):
                data = json2str(data)
        self.transport.write(data + "\r\n")




class TKListener(Factory):
    """
        ParaDropListener class.
        This class is meant to be a wrapper around the Python Twisted framework.

        The implementer is expected to overwrite FOUR functions below which allows them to
        easily implement a Listener class using the Python Twisted event driven style structure.

        You should write a class which implements this TKListener class.
        This class should overwrite the following functions:

        - connectionMade(self, proto)
            When a new connection is made, this is the very first function called which lets us know.
        - connectionLost(self, proto, reason)
            When a protocol looses a connection to a client this function is called.
        - dataReceived(self, proto, data)
            When a client sends data via this protocol this function is called with @data as a string.
        - dataReceivedFailure(self, proto, data, e)
            When a client sends data that JSON cannot loads without error, this function is called.

        You do not have to overwrite all of these functions, for instance, if you do not care
        that a connection is lost then ignore the connectionLost function.
    """
    def __init__(self, reactor, port, intf="", backlog=50, logprefix="TKLISTENER", verbose=False):
        self.reactor = reactor
        self.port = port
        self.intf = intf
        self.backlog = backlog
        self.logprefix = logprefix
        self.verbose = verbose

        # Setup the listen
        self.reactor.listenTCP(self.port, self, backlog=self.backlog, interface=self.intf)

    def buildProtocol(self, addr):
        """@override"""
        return TKListenerProtocol(addr, self)

    def connectionMade(self, proto):
        """@override:
            On connection made do this"""
        pass

    def dataReceived(self, proto, data):
        """@override:
            Main function which receives data from outside world"""
        pass
    def dataReceivedFailure(self, proto, data, e):
        """@override:
            On a JSON.loads failure, this function is called with the string form of the @data and the @proto it came from.
            It also contains the Exception object generated by the failure."""
        pass

    def connectionLost(self, proto, reason):
        """@override:
            On a lost connection this is called"""
        pass

class TKListenerRaw(TKListener):
    """
        ParaDropListener class.
        Does not expect JSON objects.

        You should write a class which implements this TKListener class.
        This class should overwrite the following functions:

        - connectionMade(self, proto)
            When a new connection is made, this is the very first function called which lets us know.
        - connectionLost(self, proto, reason)
            When a protocol looses a connection to a client this function is called.
        - dataReceived(self, proto, data)
            When a client sends data via this protocol this function is called with @data as a string.
        - dataReceivedFailure(self, proto, data, e)
            When a client sends invalid data

        You do not have to overwrite all of these functions, for instance, if you do not care
        that a connection is lost then ignore the connectionLost function.
    """
    def __init__(self, reactor, port, intf="", backlog=50, logprefix="TKLISTENER", verbose=False):
        self.reactor = reactor
        self.port = port
        self.intf = intf
        self.backlog = backlog
        self.logprefix = logprefix
        self.verbose = verbose

        # Setup the listen
        self.reactor.listenTCP(self.port, self, backlog=self.backlog, interface=self.intf)

    def buildProtocol(self, addr):
        """@override"""
        return TKListenerProtocol(addr, self, False)

